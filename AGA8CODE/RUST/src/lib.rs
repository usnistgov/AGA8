//! AGA8 calculations

const NC_DETAIL: usize = 21;
const MAXFLDS: usize  = 21;
const NTERMS: usize   = 58;
const EPSILON: f64 = 1e-15;
const RDETAIL: f64 = 8.31451;

/// Molar masses (g/mol)
const MMI_DETAIL: [f64; 21] = [
    16.043,  // Methane
    28.0135, // Nitrogen
    44.01,   // Carbon dioxide
    30.07,   // Ethane
    44.097,  // Propane
    58.123,  // Isobutane
    58.123,  // n-Butane
    72.15,   // Isopentane
    72.15,   // n-Pentane
    86.177,  // Hexane
    100.204, // Heptane
    114.231, // Octane
    128.258, // Nonane
    142.285, // Decane
    2.0159,  // Hydrogen
    31.9988, // Oxygen
    28.01,   // Carbon monoxide
    18.0153, // Water
    34.082,  // Hydrogen sulfide
    4.0026,  // Helium
    39.948,  // Argon
];

/// Coefficients of the equation of state
const AN: [f64; NTERMS] = [
    0.1538326,
    1.341953,
    -2.998583,
    -0.04831228,
    0.3757965,
    -1.589575,
    -0.05358847,
    0.88659463,
    -0.71023704,
    -1.471722,
    1.32185035,
    -0.78665925,
    0.00000000229129,
    0.1576724,
    -0.4363864,
    -0.04408159,
    -0.003433888,
    0.03205905,
    0.02487355,
    0.07332279,
    -0.001600573,
    0.6424706,
    -0.4162601,
    -0.06689957,
    0.2791795,
    -0.6966051,
    -0.002860589,
    -0.008098836,
    3.150547,
    0.007224479,
    -0.7057529,
    0.5349792,
    -0.07931491,
    -1.418465,
    -5.99905E-17,
    0.1058402,
    0.03431729,
    -0.007022847,
    0.02495587,
    0.04296818,
    0.7465453,
    -0.2919613,
    7.294616,
    -9.936757,
    -0.005399808,
    -0.2432567,
    0.04987016,
    0.003733797,
    1.874951,
    0.002168144,
    -0.6587164,
    0.000205518,
    0.009776195,
    -0.02048708,
    0.01557322,
    0.006862415,
    -0.001226752,
    0.002850908,
];

/// Density exponents
const BN: [usize; NTERMS] = [
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9,
];

/// Exponents on density in EXP[-cn*D^kn] part
/// The cn part in this term is not included in this program since it is 1 when kn<>0][and 0 otherwise
const KN: [usize; NTERMS] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 2, 2, 4, 4, 0, 0, 2, 2, 2, 4, 4, 4, 4, 0, 1, 1,
    2, 2, 3, 3, 4, 4, 4, 0, 0, 2, 2, 2, 4, 4, 0, 2, 2, 4,
    4, 0, 2, 0, 2, 1, 2, 2, 2, 2,
];

/// Temperature exponents
const UN: [f64; NTERMS] = [
    0.0, 0.5, 1.0, 3.5, -0.5, 4.5, 0.5, 7.5, 9.5, 6.0,
    12.0, 12.5, -6.0, 2.0, 3.0, 2.0, 2.0, 11.0, -0.5, 0.5,
    0.0, 4.0, 6.0, 21.0, 23.0, 22.0, -1.0, -0.5, 7.0, -1.0,
    6.0, 4.0, 1.0, 9.0, -13.0, 21.0, 8.0, -0.5, 0.0, 2.0,
    7.0, 9.0, 22.0, 23.0, 1.0, 9.0, 3.0, 8.0, 23.0, 1.5,
    5.0, -0.5, 4.0, 7.0, 3.0, 0.0, 1.0, 0.0,
];

/// Flags
// fn[13] = 1; fn[27] = 1; fn[30] = 1; fn[35] = 1;
const FN: [i32; NTERMS] = [
    0,0,0,0,0,0,0,0,0,0,0,0,
    1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,
    0,0,
    1,
    0,0,0,0,
    1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
];

// gn[5] = 1; gn[6] = 1; gn[25] = 1; gn[29] = 1; gn[32] = 1;
// gn[33] = 1; gn[34] = 1; gn[51] = 1; gn[54] = 1; gn[56] = 1;
const GN: [i32; NTERMS] = [
    0,0,0,0,
    1,1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,
    0,0,0,
    1,
    0,0,
    1,1,1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,
    0,0,
    1,
    0,
    1,
    0,0
];

// qn[7] = 1; qn[16] = 1; qn[26] = 1; qn[28] = 1; qn[37] = 1;
// qn[42] = 1; qn[47] = 1; qn[49] = 1; qn[52] = 1; qn[58] = 1;
const QN: [i32; NTERMS] = [
    0,0,0,0,0,0,
    1,
    0,0,0,0,0,0,0,0,
    1,
    0,0,0,0,0,0,0,0,0,
    1,
    0,
    1,
    0,0,0,0,0,0,0,0,
    1,
    0,0,0,0,
    1,
    0,0,0,0,
    1,
    0,
    1,
    0,0,
    1,
    0,0,0,0,0,
    1,
];

// sn[8] = 1; sn[9] = 1;
const SN: [i32; NTERMS] = [
    0,0,0,0,0,0,0,
    1,1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,
];

// wn[10] = 1; wn[11] = 1; wn[12] = 1;
const WN: [i32; NTERMS] = [
    0,0,0,0,0,0,0,0,0,
    1,1,1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,
];

/// Energy parameters
const EI: [f64; MAXFLDS] = [
    151.3183,
    99.73778,
    241.9606,
    244.1667,
    298.1183,
    324.0689,
    337.6389,
    365.5999,
    370.6823,
    402.636293,
    427.72263,
    450.325022,
    470.840891,
    489.558373,
    26.95794,
    122.7667,
    105.5348,
    514.0156,
    296.355,
    2.610111,
    119.6299,
];
/// Size parameters
const KI: [f64; MAXFLDS] = [
    0.4619255,
    0.4479153,
    0.4557489,
    0.5279209,
    0.583749,
    0.6406937,
    0.6341423,
    0.6738577,
    0.6798307,
    0.7175118,
    0.7525189,
    0.784955,
    0.8152731,
    0.8437826,
    0.3514916,
    0.4186954,
    0.4533894,
    0.3825868,
    0.4618263,
    0.3589888,
    0.4216551,
];

/// Orientation parameters
const GI: [f64; MAXFLDS] = [
    0.0,
    0.027815,
    0.189065,
    0.0793,
    0.141239,
    0.256692,
    0.281835,
    0.332267,
    0.366911,
    0.289731,
    0.337542,
    0.383381,
    0.427354,
    0.469659,
    0.034369,
    0.021,
    0.038953,
    0.3325,
    0.0885,
    0.0, 0.0,
];

/// Quadrupole parameters
const QI: [f64; MAXFLDS] = [
    0.0, 0.0,
    0.69,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.06775,
    0.633276,
    0.0, 0.0,
];

const FI: [f64; MAXFLDS] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0,        // High temperature parameter
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
];

const SI: [f64; MAXFLDS] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0,
    1.5822,   // Dipole parameter
    0.39,     // Dipole parameter
    0.0, 0.0,
];

const WI: [f64; MAXFLDS] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0,
    1.0,        // Association parameter
    0.0, 0.0, 0.0,
];

/// Energy parameters
const EIJ: [[f64; MAXFLDS]; MAXFLDS] = [
    [1.0, 0.97164, 0.960644, 1.0, 0.994635, 1.01953, 0.989844, 1.00235, 0.999268, 1.107274, 0.88088, 0.880973, 0.881067, 0.881161, 1.17052, 1.0, 0.990126, 0.708218, 0.931484, 1.0, 1.0, ],
    [1.0, 1.0, 1.02274, 0.97012, 0.945939, 0.946914, 0.973384, 0.95934, 0.94552, 1.0, 1.0, 1.0, 1.0, 1.0, 1.08632, 1.021, 1.00571, 0.746954, 0.902271, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 0.925053, 0.960237, 0.906849, 0.897362, 0.726255, 0.859764, 0.855134, 0.831229, 0.80831, 0.786323, 0.765171, 1.28179, 1.0, 1.5, 0.849408, 0.955052, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.02256, 1.0, 1.01306, 1.0, 1.00532, 1.0, 1.0, 1.0, 1.0, 1.0, 1.16446, 1.0, 1.0, 0.693168, 0.946871, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0049, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.034787, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.3, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.3, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.008692, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.010126, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.011501, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.012821, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.014089, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.1, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, ],
];

const UIJ: [[f64; MAXFLDS]; MAXFLDS] = [
    [1.0000000000000000, 0.8861059999999999, 0.9638270000000000, 1.0000000000000000, 0.9908770000000000, 1.0000000000000000, 0.9922910000000000, 1.0000000000000000, 1.0036700000000001, 1.3025760000000000, 1.1919040000000001, 1.2057690000000001, 1.2196340000000001, 1.2334980000000000, 1.1563900000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.7368330000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 0.8350580000000000, 0.8164310000000000, 0.9155020000000000, 1.0000000000000000, 0.9935560000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.4088380000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9934760000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9698700000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0666380000000000, 1.0776340000000000, 1.0881780000000001, 1.0982909999999999, 1.1080209999999999, 1.0000000000000000, 1.0000000000000000, 0.9000000000000000, 1.0000000000000000, 1.0452900000000001, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0651729999999999, 1.2500000000000000, 1.2500000000000000, 1.2500000000000000, 1.2500000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.6166600000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9719260000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0289729999999999, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0337540000000001, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0383380000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0427350000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0469660000000001, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
];

const KIJ: [[f64; MAXFLDS]; MAXFLDS] = [
    [1.0000000000000000, 1.0036300000000000, 0.9959330000000000, 1.0000000000000000, 1.0076190000000000, 1.0000000000000000, 0.9975960000000000, 1.0000000000000000, 1.0025290000000000, 0.9829620000000000, 0.9835650000000000, 0.9827070000000000, 0.9818490000000000, 0.9809909999999999, 1.0232600000000001, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000800000000001, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 0.9823610000000000, 1.0079600000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0322700000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9425960000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0085100000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9101830000000000, 0.8953620000000000, 0.8811520000000000, 0.8675200000000000, 0.8544060000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0077900000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9868930000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0203400000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9999690000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9681300000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9628700000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9578280000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9524410000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.9483380000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
];

const GIJ: [[f64; MAXFLDS]; MAXFLDS] = [
    [1.0000000000000000, 1.0000000000000000, 0.8076530000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.9573100000000001, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 0.9827460000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 0.3702960000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.6730900000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
    [1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, 1.0000000000000000, ],
];

const N0I: [[f64; 7]; MAXFLDS] = [
    [33.0356996943179979, -15999.6915100000005623, 3.0008800000000004, 0.7631500000000000, 0.0046000000000000, 8.7443200000000001, -4.4692100000000003, ],
    [20.7649735743179953, -2801.7290720000000874, 2.5003099999999998, 0.1373200000000000, -0.1466000000000000, 0.9006600000000000, 0.0000000000000000, ],
    [23.8557126843179930, -4902.1715160000003380, 2.5000200000000001, 2.0445199999999999, -1.0604400000000000, 2.0336599999999998, 0.0139300000000000, ],
    [39.9273251043179940, -23639.6530100000018138, 3.0026299999999999, 4.3393899999999999, 1.2372200000000000, 13.1974000000000000, -6.0198900000000002, ],
    [47.9063619143179906, -31236.6355100000000675, 3.0293900000000002, 6.6056900000000001, 3.1970000000000001, 19.1920999999999999, -8.3726699999999994, ],
    [37.4990692143179913, -38525.5027600000030361, 3.0671400000000002, 8.9757499999999997, 5.2515599999999996, 25.1422999999999988, 16.1387999999999998, ],
    [39.7296435543179953, -38957.8093299999964074, 3.3394399999999997, 9.4489300000000007, 6.8940599999999996, 24.4618000000000002, 14.7824000000000009, ],
    [46.3694519843179904, -51198.3094599999967613, 3.0000000000000000, 11.7617999999999991, 20.1100999999999992, 33.1687999999999974, 0.0000000000000000, ],
    [45.8756366143179903, -45215.8300000000017462, 3.0000000000000000, 8.9504300000000008, 21.8359999999999985, 33.4031999999999982, 0.0000000000000000, ],
    [50.1944376043179972, -52746.8331800000014482, 3.0000000000000000, 11.6976999999999993, 26.8141999999999996, 38.6163999999999987, 0.0000000000000000, ],
    [55.2735820343179967, -57104.8105599999980768, 3.0000000000000000, 13.7265999999999995, 30.4707000000000008, 43.5561000000000007, 0.0000000000000000, ],
    [60.4555750643179906, -60546.7638500000030035, 3.0000000000000000, 15.6865000000000006, 33.8029000000000011, 48.1730999999999980, 0.0000000000000000, ],
    [65.2937347343179937, -66600.1283700000058161, 3.0000000000000000, 18.0241000000000007, 38.1234999999999999, 53.3415000000000035, 0.0000000000000000, ],
    [69.1363572643180078, -74131.4548300000024028, 3.0000000000000000, 21.0069000000000017, 43.4930999999999983, 58.3656999999999968, 0.0000000000000000, ],
    [16.2724686043179965, -5836.9436960000002728, 1.4790600000000000, 0.9580600000000000, 0.4544400000000000, 1.5603899999999999, -1.3755999999999999, ],
    [19.9989830243179938, -2318.3226899999999659, 2.5014599999999998, 1.0755800000000000, 1.0133399999999999, 0.0000000000000000, 0.0000000000000000, ],
    [20.6551347143179953, -2635.2441159999998490, 2.5005500000000001, 1.0286500000000001, 0.0049300000000000, 0.0000000000000000, 0.0000000000000000, ],
    [24.7760927743179948, -7766.7330780000002051, 3.0039199999999999, 0.0105900000000000, 0.9876300000000000, 3.0690400000000002, 0.0000000000000000, ],
    [24.7803601243179941, -6069.0358690000002753, 3.0000000000000000, 3.1194199999999999, 1.0024299999999999, 0.0000000000000000, 0.0000000000000000, ],
    [13.2436607943179947, -745.3750000000000000, 1.5000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, ],
    [13.2436607943179947, -745.3750000000000000, 1.5000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, ],
];

const TH0I: [[f64; 7]; MAXFLDS] = [
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 820.6589999999999918, 178.4099999999999966, 1062.8199999999999363, 1090.5299999999999727, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 662.7380000000000564, 680.5620000000000118, 1740.0599999999999454, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 919.3060000000000400, 865.0700000000000500, 483.5529999999999973, 341.1089999999999804, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 559.3139999999999645, 223.2839999999999918, 1031.3800000000001091, 1071.2899999999999636, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 479.8559999999999945, 200.8930000000000007, 955.3120000000000118, 1027.2899999999999636, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 438.2699999999999818, 198.0180000000000007, 1905.0199999999999818, 893.7649999999999864, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 468.2699999999999818, 183.6359999999999957, 1914.0999999999999091, 903.1849999999999454, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 292.5029999999999859, 910.2369999999999663, 1919.3699999999998909, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 178.6699999999999875, 840.5380000000000109, 1774.2500000000000000, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 182.3259999999999934, 859.2069999999999936, 1826.5899999999999181, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 169.7889999999999873, 836.1950000000000500, 1760.4600000000000364, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 158.9219999999999970, 815.0639999999999645, 1693.0699999999999363, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 156.8540000000000134, 814.8819999999999482, 1693.7899999999999636, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 164.9470000000000027, 836.2640000000000100, 1750.2400000000000091, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 228.7340000000000089, 326.8430000000000177, 1651.7100000000000364, 1671.6900000000000546, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 2235.7100000000000364, 1116.6900000000000546, 0.0000000000000000, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1550.4500000000000455, 704.5249999999999773, 0.0000000000000000, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 268.7950000000000159, 1141.4100000000000819, 2507.3699999999998909, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1833.6300000000001091, 847.1810000000000400, 0.0000000000000000, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, ],
    [0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, ],
];


pub struct AGA8Detail {
    /// Calculated in the Pressure subroutine,
    /// but not included as an argument since it
    /// is only used internally in the density algorithm.
    dp_dd_save: f64, 

    /// Temperature (K)
    pub t: f64,
    /// Pressure (kPa)
    pub p: f64,
    /// Molar concentration (mol/l)
    pub d: f64,
    /// Compressibility factor
    pub z: f64,
    /// Molar mass (g/mol)
    pub mm: f64,
    /// First derivative of pressure with respect
    /// to density at constant temperature [kPa/(mol/l)]
    pub dp_dd: f64,
    /// Second derivative of pressure with respect
    /// to density at constant temperature [kPa/(mol/l)^2]
    pub d2p_dd2: f64,
    /// Second derivative of pressure with respect to
    /// temperature and density [kPa/(mol/l)/K] (currently not calculated)
    pub d2p_dtd: f64,
    /// First derivative of pressure with respect to
    /// temperature at constant density (kPa/K)
    pub dp_dt: f64,
    /// Internal energy (J/mol)
    pub u: f64,
    /// Enthalpy (J/mol)
    pub h: f64,
    /// Entropy [J/(mol-K)]
    pub s: f64,
    /// Isochoric heat capacity [J/(mol-K)]
    pub cv: f64,
    /// Isobaric heat capacity [J/(mol-K)]
    pub cp: f64,
    /// Speed of sound (m/s)
    pub w: f64,
    /// Gibbs energy (J/mol)
    pub g: f64,
    /// Joule-Thomson coefficient (K/kPa)
    pub jt: f64,
    /// Isentropic Exponent
    pub kappa: f64,
    /// Composition (mole fraction)
    pub x: [f64; NC_DETAIL],

    xold: [f64; MAXFLDS],
    told: f64,
    ki25: [f64; MAXFLDS],
    ei25: [f64; MAXFLDS],
    bsnij2: [[[f64; 18]; MAXFLDS]; MAXFLDS],
    bs: [f64; 18],
    kij5: [[f64; MAXFLDS]; MAXFLDS],
    uij5: [[f64; MAXFLDS]; MAXFLDS],
    gij5: [[f64; MAXFLDS]; MAXFLDS],
    k3: f64,
    csn: [f64; NTERMS],
    a0: [f64; 3],
    ar: [[f64; 4]; 4],
    tun: [f64; NTERMS],

}

impl Default for AGA8Detail {
    fn default() -> Self {
        AGA8Detail {
            dp_dd_save: 0.0,
            x: [0.0; NC_DETAIL],
            t: 0.0,
            p: 0.0,
            d: 0.0,
            z: 0.0,
            mm: 0.0,
            dp_dd: 0.0,
            d2p_dd2: 0.0,
            d2p_dtd: 0.0,
            dp_dt: 0.0,
            u: 0.0,
            h: 0.0,
            s: 0.0,
            cv: 0.0,
            cp: 0.0,
            w: 0.0,
            g: 0.0,
            jt: 0.0,
            kappa: 0.0,
            xold: [0.0; MAXFLDS],
            told: 0.0,
            ki25: [0.0; MAXFLDS],
            ei25: [0.0; MAXFLDS],
            bsnij2: [[[0.0; 18]; MAXFLDS]; MAXFLDS],
            bs: [0.0; 18],
            kij5: [[0.0; MAXFLDS]; MAXFLDS],
            uij5: [[0.0; MAXFLDS]; MAXFLDS],
            gij5: [[0.0; MAXFLDS]; MAXFLDS],
            k3: 0.0,
            a0: [0.0; 3],
            ar: [[0.0; 4]; 4],
            csn: [0.0; NTERMS],
            tun: [0.0; NTERMS],
        }
    }
}

impl AGA8Detail {
    /// Initialize all the constants and parameters in the DETAIL model.
    /// 
    /// Some values are modified for calculations that do not depend
    /// on T, D, and x in order to speed up the program.
    pub fn setup(&mut self) {
        for i in 0..MAXFLDS {
            self.ki25[i] = KI[i].powf(2.5);
            self.ei25[i] = EI[i].powf(2.5);
        }

        let mut bsnij: f64;

        for i in 0..MAXFLDS {
            for j in 0..MAXFLDS {
                for n in 0..18 {
                    bsnij = 1.0;
                    if GN[n] == 1 { bsnij = GIJ[i][j] * (GI[i] + GI[j]) / 2.0; }
                    if QN[n] == 1 { bsnij = bsnij * QI[i] * QI[j]; }
                    if FN[n] == 1 { bsnij = bsnij * FI[i] * FI[j]; }
                    if SN[n] == 1 { bsnij = bsnij * SI[i] * SI[j]; }
                    if WN[n] == 1 { bsnij = bsnij * WI[i] * WI[j]; }
                    self.bsnij2[i][j][n] = AN[n] * f64::powf(EIJ[i][j]*f64::sqrt(EI[i]*EI[j]), UN[n]) * f64::powf(KI[i]*KI[j], 1.5) * bsnij;
                }
                self.kij5[i][j] = (f64::powi(KIJ[i][j], 5) - 1.0)*self.ki25[i]*self.ki25[j];
                self.uij5[i][j] = (f64::powi(UIJ[i][j], 5) - 1.0)*self.ei25[i]*self.ei25[j];
                self.gij5[i][j] = (GIJ[i][j] - 1.0)*(GI[i] + GI[j])/2.0;
            }
        }

        // Ideal gas terms
        // const D0: f64 = 101.325/RDETAIL/298.15;

        // for i in 0..MAXFLDS {
        //     self.n0i[i][3] = self.n0i[i][3] - 1.0;
        //     self.n0i[i][1] = self.n0i[i][1] - f64::ln(D0);
        // }
    }

    /// Calculate molar mass of the mixture with the compositions
    /// contained in the x() input array
    /// ## Inputs:
    ///- x() - Composition (mole fraction)
    /// 
    ///   Do not send mole percents or mass fractions in the x() array, otherwise the output will be incorrect.
    ///   The sum of the compositions in the x() array must be equal to one.
    ///   The order of the fluids in this array is given at the top of this code.
    /// ## Returns:
    /// - mm - Molar mass (g/mol)
    pub fn molar_mass_detail(&mut self) -> f64 {

        let mut mm = 0.0;
        for i in 0..NC_DETAIL {
            mm += self.x[i] * MMI_DETAIL[i];
        }
        self.mm = mm;
        mm
    }

    /// Calculate terms dependent only on composition
    /// 
    /// ## Inputs:
    /// - x() - Composition (mole fraction)
    fn x_terms(&mut self) {

        let mut g: f64;
        let mut q: f64;
        let mut f: f64;
        let mut u: f64;
        let q2: f64;
        let mut xij: f64;
        let mut xi2: f64;
        let mut icheck: i32;

        // Check to see if a component fraction has changed.  If x is the same as the previous call, then exit.
        icheck = 0;

        for i in 0..NC_DETAIL {
            if f64::abs(self.x[i] - self.xold[i]) > 0.0000001 { icheck = 1; }
            self.xold[i] = self.x[i];
        }
        if icheck == 0 {
            return;
        }

        self.k3 = 0.0; u = 0.0; g = 0.0; q = 0.0; f = 0.0;
        for n in 0..18 {
            self.bs[n] = 0.0;
        }

        // Calculate pure fluid contributions
        for i in 0..NC_DETAIL {
            if self.x[i] > 0.0 {
                xi2 = f64::powi(self.x[i], 2);
                self.k3 += self.x[i] * self.ki25[i];   // K, U, and G are the sums of a pure fluid contribution and a
                u += self.x[i] * self.ei25[i];    // binary pair contribution
                g += self.x[i] * GI[i];
                q += self.x[i] * QI[i];      // Q and F depend only on the pure fluid parts
                f += xi2 * FI[i];

                for n in 0..18 {
                    self.bs[n] = self.bs[n] + xi2 * self.bsnij2[i][i][n];   // Pure fluid contributions to second virial coefficient
                }
            }
        }
        self.k3 = f64::powi(self.k3, 2);
        u = f64::powi(u, 2);

        // Binary pair contributions
        for i in 0..NC_DETAIL {
            if self.x[i] > 0.0 {
                for j in i+1..NC_DETAIL {
                    if self.x[j] > 0.0 {
                        xij = 2.0 * self.x[i] * self.x[j];
                        self.k3 = self.k3 + xij * self.kij5[i][j];
                        u = u + xij * self.uij5[i][j];
                        g = g + xij * self.gij5[i][j];

                        for n in 0..18 {
                            self.bs[n] = self.bs[n] + xij * self.bsnij2[i][j][n];     // Second virial coefficients of mixture
                        }
                    }
                }
            }
        }
        self.k3 = f64::powf(self.k3, 0.6);
        u = f64::powf(u, 0.2);

        // Third virial and higher coefficients
        q2 = f64::powi(q, 2);
        for n in 12..58 {
            self.csn[n] = AN[n] * f64::powf(u, UN[n]);
            if GN[n] == 1 { self.csn[n] = self.csn[n] * g; }
            if QN[n] == 1 { self.csn[n] = self.csn[n] * q2; }
            if FN[n] == 1 { self.csn[n] = self.csn[n] * f; }
        }
    }

    fn alpha0_detail(&mut self) {
        // Calculate the ideal gas Helmholtz energy and its derivatives with respect to T and D.
        // This routine is not needed when only P (or Z) is calculated.

        // Inputs:
        //      T - Temperature (K)
        //      D - Density (mol/l)
        //    x() - Composition (mole fraction)

        // Outputs:
        // a0(0) - Ideal gas Helmholtz energy (J/mol)
        // a0(1) -   partial  (a0)/partial(T) [J/(mol-K)]
        // a0(2) - T*partial^2(a0)/partial(T)^2 [J/(mol-K)]

        let logt: f64;
        let logd: f64;
        let mut loghyp: f64;
        let mut th0t: f64;
        let mut logxd: f64;

        let mut sumhyp0: f64;
        let mut sumhyp1: f64;
        let mut sumhyp2: f64;

        let mut em: f64;
        let mut ep: f64;
        let mut hcn: f64;
        let mut hsn: f64;


        self.a0[0] = 0.0; self.a0[1] = 0.0; self.a0[2] = 0.0;
        if self.d > EPSILON { logd = f64::ln(self.d); } else {logd = f64::ln(EPSILON);}
        logt = f64::ln(self.t);

        for i in 0..NC_DETAIL {
            if self.x[i] > 0.0 {
                logxd = logd + f64::ln(self.x[i]);
                sumhyp0 = 0.0;
                sumhyp1 = 0.0;
                sumhyp2 = 0.0;

                for j in 3..7 {
                    if TH0I[i][j] > 0.0 {
                        th0t = TH0I[i][j] / self.t;
                        ep = f64::exp(th0t);
                        em = 1.0 / ep;
                        hsn = (ep - em) / 2.0;
                        hcn = (ep + em) / 2.0;

                        if j == 3 || j == 5 {
                            loghyp = f64::ln(f64::abs(hsn));
                            sumhyp0 += N0I[i][j] * loghyp;
                            sumhyp1 += N0I[i][j] * (loghyp - th0t * hcn / hsn);
                            sumhyp2 += N0I[i][j] * f64::powi(th0t / hsn, 2);
                        }
                        else{
                            loghyp = f64::ln(f64::abs(hcn));
                            sumhyp0 += - N0I[i][j] * loghyp;
                            sumhyp1 += - N0I[i][j] * (loghyp - th0t * hsn / hcn);
                            sumhyp2 +=   N0I[i][j] * f64::powi(th0t / hcn, 2);
                        }
                    }
                }        
                self.a0[0] += self.x[i] * (logxd + N0I[i][0] + N0I[i][1] / self.t - N0I[i][2] * logt + sumhyp0);
                self.a0[1] += self.x[i] * (logxd + N0I[i][0] - N0I[i][2] * (1.0 + logt) + sumhyp1);
                self.a0[2] += - self.x[i] * (N0I[i][2] + sumhyp2);
            }
        }
        self.a0[0] = self.a0[0] * RDETAIL * self.t;
        self.a0[1] = self.a0[1] * RDETAIL;
        self.a0[2] = self.a0[2] * RDETAIL;
    }

    fn alphar(&mut self, itau: i32, _idel: i32) {
        // Calculate the derivatives of the residual Helmholtz energy (ar) with respect to T and D.
        // itau and idel are inputs that contain the highest derivatives needed.
        // Outputs are returned in the array ar.
        // Subroutine xTerms must be called before this routine if x has changed

        // Inputs:
        //  itau - Set this to 1 to calculate "ar" derivatives with respect to T [i.e., ar(1,0), ar(1,1), and ar(2,0)], otherwise set it to 0.
        //  idel - Currently not used, but kept as an input for future use in specifing the highest density derivative needed.
        //     T - Temperature (K)
        //     D - Density (mol/l)

        // Outputs:
        // ar(0,0) - Residual Helmholtz energy (J/mol)
        // ar(0,1) -   D*partial  (ar)/partial(D) (J/mol)
        // ar(0,2) - D^2*partial^2(ar)/partial(D)^2 (J/mol)
        // ar(0,3) - D^3*partial^3(ar)/partial(D)^3 (J/mol)
        // ar(1,0) -     partial  (ar)/partial(T) [J/(mol-K)]
        // ar(1,1) -   D*partial^2(ar)/partial(D)/partial(T) [J/(mol-K)]
        // ar(2,0) -   T*partial^2(ar)/partial(T)^2 [J/(mol-K)]

        let mut ckd;
        let mut bkd;
        let dred;

        let mut sum;
        let mut s0;
        let mut s1;
        let mut s2;
        let mut s3;
        let rt;

        let mut sum0: [f64; NTERMS] = [0.0; NTERMS];
        let mut sumb: [f64; NTERMS] = [0.0; NTERMS];
        let mut dknn: [f64; 10] = [0.0; 10];
        let mut expn: [f64; 5] = [0.0; 5];

        let mut coefd1: [f64; NTERMS] = [0.0; NTERMS];
        let mut coefd2: [f64; NTERMS] = [0.0; NTERMS];
        let mut coefd3: [f64; NTERMS] = [0.0; NTERMS];

        let mut coeft1: [f64; NTERMS] = [0.0; NTERMS];
        let mut coeft2: [f64; NTERMS] = [0.0; NTERMS];

        for i in 0..4 {
            for j in 0..4 {
                self.ar[i][j] = 0.0;
            }
        }
        if f64::abs(self.t - self.told) > 0.0000001 {
            for n in 0..58 {
                self.tun[n] = f64::powf(self.t, -UN[n]);
            }
        }
        self.told = self.t;

        // Precalculation of common powers and exponents of density
        dred = self.k3 * self.d;
        dknn[0] = 1.0;

        for n in 1..10 {
            dknn[n] = dred*dknn[n - 1];
        }
        expn[0] = 1.0;

        for n in 1..5 {
            expn[n] = f64::exp(-dknn[n]);
        }
        rt = RDETAIL * self.t;

        for n in 0..58 {
            // Contributions to the Helmholtz energy and its derivatives with respect to temperature
            coeft1[n] = RDETAIL * (UN[n] - 1.0);
            coeft2[n] = coeft1[n] * UN[n];
            // Contributions to the virial coefficients
            sumb[n] = 0.0;
            sum0[n] = 0.0;
            if n <= 17 {
                sum = self.bs[n] * self.d;
                if n >= 12 {
                    sum += - self.csn[n] * dred;
                }
                sumb[n] = sum * self.tun[n];
            }
            if n >= 12 {
                // Contributions to the residual part of the Helmholtz energy
                sum0[n] = self.csn[n] * dknn[BN[n]] * self.tun[n] * expn[KN[n]];
                // Contributions to the derivatives of the Helmholtz energy with respect to density
                bkd = BN[n] as f64 - KN[n] as f64 * dknn[KN[n]];
                ckd = KN[n] as f64 * KN[n] as f64 * dknn[KN[n]];
                coefd1[n] = bkd;
                coefd2[n] = bkd * (bkd - 1.0) - ckd;
                coefd3[n] = (bkd - 2.0) * coefd2[n] + ckd * (1.0 - KN[n] as f64 - 2.0 * bkd);
            }
            else{
                coefd1[n] = 0.0; coefd2[n] = 0.0; coefd3[n] = 0.0;
            }
        }

        for n in 0..58 {
            // Density derivatives
            s0 = sum0[n] + sumb[n];
            s1 = sum0[n] * coefd1[n] + sumb[n];
            s2 = sum0[n] * coefd2[n];
            s3 = sum0[n] * coefd3[n];
            self.ar[0][0] = self.ar[0][0] + rt * s0;
            self.ar[0][1] = self.ar[0][1] + rt * s1;
            self.ar[0][2] = self.ar[0][2] + rt * s2;
            self.ar[0][3] = self.ar[0][3] + rt * s3;
            // Temperature derivatives
            if itau > 0 {
                self.ar[1][0] = self.ar[1][0] - coeft1[n] * s0;
                self.ar[1][1] = self.ar[1][1] - coeft1[n] * s1;
                self.ar[2][0] = self.ar[2][0] + coeft2[n] * s0;
                //The following are not used, but fully functional
                //ar(1, 2) = ar(1, 2) - CoefT1(n) * s2;
                //ar(1, 3) = ar(1, 3) - CoefT1(n) * s3;
                //ar(2, 1) = ar(2, 1) + CoefT2(n) * s1;
                //ar(2, 2) = ar(2, 2) + CoefT2(n) * s2;
                //ar(2, 3) = ar(2, 3) + CoefT2(n) * s3;
            }
        }
    }

    pub fn density_detail(&mut self) -> f64 {
        // Calculate density as a function of temperature and pressure.  This is an iterative routine that calls PressureDetail
        // to find the correct state point.  Generally only 6 iterations at most are required.
        // If the iteration fails to converge, the ideal gas density and an error message are returned.
        // No checks are made to determine the phase boundary, which would have guaranteed that the output is in the gas phase.
        // It is up to the user to locate the phase boundary, and thus identify the phase of the T and P inputs.
        // If the state point is 2-phase, the output density will represent a metastable state.

        // Inputs:
        //      T - Temperature (K)
        //      P - Pressure (kPa)
        //    x() - Composition (mole fraction)

        // Outputs:
        //      D - Density (mol/l) (make D negative and send as an input to use as an initial guess)

        let plog: f64;
        let mut vlog: f64;
        let mut dpdlv: f64;
        let mut vdiff: f64;
        let tolr: f64;
        let mut p2: f64;

        if f64::abs(self.p) < EPSILON { self.d = 0.0; return self.d; }
        tolr = 0.0000001;
        if self.d > -EPSILON {
            self.d = self.p / RDETAIL / self.t;  // Ideal gas estimate
        }
        else{
            self.d = f64::abs(self.d);      // If D<0, then use as initial estimate
        }
        plog = f64::ln(self.p);
        vlog = -f64::ln(self.d);
        for _it in 0..20 {
            if vlog < -7.0 || vlog > 100.0 {
                //ierr = 1; herr = "Calculation failed to converge in DETAIL method, ideal gas density returned.";
                self.d = self.p / RDETAIL / self.t;
                return self.d;
            }
            self.d = f64::exp(-vlog);
            p2 = self.pressure_detail();
            if self.dp_dd_save < EPSILON || p2 < EPSILON {
                vlog += 0.1;
            } else {
                // Find the next density with a first order Newton's type iterative scheme, with
                // log(P) as the known variable and log(v) as the unknown property.
                // See AGA 8 publication for further information.
                dpdlv = -self.d * self.dp_dd_save;     // d(p)/d[log(v)]
                vdiff = (f64::ln(p2) - plog) * p2 / dpdlv;
                vlog = vlog - vdiff;
                if f64::abs(vdiff) < tolr {
                    self.d = f64::exp(-vlog);
                    return self.d;               // Iteration converged
                }
            }
        }
        //ierr = 1; herr = "Calculation failed to converge in DETAIL method, ideal gas density returned.";
        self.d = self.p / RDETAIL / self.t;
        return self.d;
    }

    pub fn pressure_detail(&mut self) -> f64 {
        // Calculate pressure as a function of temperature and density.  The derivative d(P)/d(D) is also calculated
        // for use in the iterative DensityDetail subroutine (and is only returned as a common variable).

        // Inputs:
        //      T - Temperature (K)
        //      D - Density (mol/l)
        //    x() - Composition (mole fraction)
        //          Do not send mole percents or mass fractions in the x() array, otherwise the output will be incorrect.
        //          The sum of the compositions in the x() array must be equal to one.

        // Outputs:
        //      P - Pressure (kPa)
        //      Z - Compressibility factor
        //   dPdDsave - d(P)/d(D) [kPa/(mol/l)] (at constant temperature)
        //            - This variable is cached in the common variables for use in the iterative density solver, but not returned as an argument.

        self.x_terms();
        self.alphar(0, 2);
        self.z = 1.0 + self.ar[0][1] / RDETAIL / self.t; // ar(0,1) is the first derivative of alpha(r) with respect to density
        let p = self.d * RDETAIL * self.t * self.z;
        self.dp_dd_save = RDETAIL * self.t + 2.0 * self.ar[0][1] + self.ar[0][2]; // d(P)/d(D) for use in density iteration
        p
    }

    pub fn properties_detail(&mut self) {
        // Calculate thermodynamic properties as a function of temperature and density.  Calls are made to the subroutines
        // Molarmass, Alpha0Detail, and AlpharDetail.  If the density is not known, call subroutine DensityDetail first
        // with the known values of pressure and temperature.

        // Inputs:
        //      T - Temperature (K)
        //      D - Density (mol/l)
        //    x() - Composition (mole fraction)

        // Outputs:
        //      P - Pressure (kPa)
        //      Z - Compressibility factor
        //   dPdD - First derivative of pressure with respect to density at constant temperature [kPa/(mol/l)]
        // d2PdD2 - Second derivative of pressure with respect to density at constant temperature [kPa/(mol/l)^2]
        // d2PdTD - Second derivative of pressure with respect to temperature and density [kPa/(mol/l)/K] (currently not calculated)
        //   dPdT - First derivative of pressure with respect to temperature at constant density (kPa/K)
        //      U - Internal energy (J/mol)
        //      H - Enthalpy (J/mol)
        //      S - Entropy [J/(mol-K)]
        //     Cv - Isochoric heat capacity [J/(mol-K)]
        //     Cp - Isobaric heat capacity [J/(mol-K)]
        //      W - Speed of sound (m/s)
        //      G - Gibbs energy (J/mol)
        //     JT - Joule-Thomson coefficient (K/kPa)
        //  Kappa - Isentropic Exponent

        //double a0[2+1], ar[3+1][3+1], Mm, A, R, RT;
        let mm: f64;
        let a: f64;
        let r: f64;
        let rt: f64;


        mm = self.molar_mass_detail();
        self.x_terms();

        // Calculate the ideal gas Helmholtz energy, and its first and second derivatives with respect to temperature.
        self.alpha0_detail();

        // Calculate the real gas Helmholtz energy, and its derivatives with respect to temperature and/or density.
        self.alphar(2, 3);

        r = RDETAIL;
        rt = r * self.t;
        self.z = 1.0 + self.ar[0][1] / rt;
        self.p = self.d * rt * self.z;
        self.dp_dd = rt + 2.0 * self.ar[0][1] + self.ar[0][2];
        self.dp_dt = self.d * r + self.d * self.ar[1][1];
        a = self.a0[0] + self.ar[0][0];
        self.s = -self.a0[1] - self.ar[1][0];
        self.u = a + self.t * self.s;
        self.cv = -(self.a0[2] + self.ar[2][0]);
        if self.d > EPSILON {
            self.h = self.u + self.p / self.d;
            self.g = a + self.p / self.d;
            self.cp = self.cv + self.t * f64::powi(self.dp_dt / self.d, 2) / self.dp_dd;
            self.d2p_dd2 = (2.0 * self.ar[0][1] + 4.0 * self.ar[0][2] + self.ar[0][3]) / self.d;
            self.jt = (self.t / self.d * self.dp_dt / self.dp_dd - 1.0) / self.cp / self.d;
        }
        else{
            self.h = self.u + rt;
            self.g = a + rt;
            self.cp = self.cv + r;
            self.d2p_dd2 = 0.0;
            self.jt = 1.0E+20;   //=(dB/dT*T-B)/Cp for an ideal gas, but dB/dT is not calculated here
        }
        self.w = 1000.0 * self.cp / self.cv * self.dp_dd / mm;
        if self.w < 0.0 { self.w = 0.0; }
        self.w = f64::sqrt(self.w);
        self.kappa = self.w * self.w * mm / (rt * 1000.0 * self.z);
        self.d2p_dtd = 0.0;
    }
}

#[no_mangle]
pub extern "C" fn aga8_2017(composition: [f64; MAXFLDS], pressure: f64, temperature: f64, result: i32) -> f64 {
    let mut aga8_test: AGA8Detail = AGA8Detail::default();
    aga8_test.setup();
    aga8_test.x = composition;
        // 0.996_953_100, // Methane
        // 0.002_016_000, // Nitrogen
        // 0.000_093_700, // Carbon dioxide
        // 0.000_767_100, // Ethane
        // 0.000_067_900, // Propane
        // 0.000_019_700, // Isobutane
        // 0.000_006_800, // n-Butane
        // 0.000_015_600, // Isopentane
        // 0.000_000_000, // n-Pentane
        // 0.000_000_000, // Hexane
        // 0.000_000_000, // Heptane
        // 0.000_000_000, // Octane
        // 0.000_000_000, // Nonane
        // 0.000_000_000, // Decane
        // 0.000_000_000, // Hydrogen
        // 0.000_000_000, // Oxygen
        // 0.000_000_000, // Carbon monoxide
        // 0.000_000_000, // Water
        // 0.000_000_000, // Hydrogen sulfide
        // 0.000_060_100, // Helium
        // 0.000_000_000, // Argon

    aga8_test.t = temperature;
    aga8_test.p = pressure;
    aga8_test.density_detail();
    aga8_test.properties_detail();

    match result {
        0  => aga8_test.d, // Molar concentration [mol/l]
        1  => aga8_test.mm,
        2  => aga8_test.z,
        3  => aga8_test.dp_dd,
        4  => aga8_test.d2p_dd2,
        5  => aga8_test.dp_dt,
        6  => aga8_test.u,
        7  => aga8_test.h,
        8  => aga8_test.s,
        9  => aga8_test.cv,
        10 => aga8_test.cp,
        11 => aga8_test.w,
        12 => aga8_test.g,
        13 => aga8_test.jt,
        14 => aga8_test.kappa,
        15 => aga8_test.d * aga8_test.mm, // Density [kg/m³]
        _  => aga8_test.d,
    }
}
